package com.seven.leecode;

/**
 * @decs: 链表反转
 * @program: z-parent
 * @author: zhangxianwen
 * @create: 2021/4/26 17:03
 **/
public class ListNodeReverse {
    public static void main(String[] args) {
        // 单链表反转
        reverseMain();

    }

    /** 单链表反转入口 */
    private static void reverseMain() {
        ListNode listNode;
        listNode = ListNode.initNode();
        System.out.println("原链表：" + listNode.toString());
        System.out.println("递归反转：" + reverseRecursion(listNode).toString());
        listNode = ListNode.initNode();
        System.out.println("原链表：" + listNode.toString());
        System.out.println("遍历反转：" + reverseTraversal(listNode).toString());
    }

    /**
     * 单链表反转 - 简单 - 遍历解法
     * 输入：head = [1,2,3,4,5]
     * 输出：[5,4,3,2,1]
     * https://leetcode-cn.com/problems/reverse-linked-list/
     */
    public static ListNode reverseTraversal(ListNode head) {
        ListNode pre = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = pre;
            pre = curr;
            curr = next;
        }
        return pre;
    }

    /**
     * 单链表反转 - 简单 - 递归解法
     * 输入：head = [1,2,3,4,5]
     * 输出：[5,4,3,2,1]
     * https://leetcode-cn.com/problems/reverse-linked-list/
     */
    public static ListNode reverseRecursion(ListNode head) {
        if (head.next == null) {
            return head;
        }
        ListNode last = reverseRecursion(head.next);
        head.next.next = head;
        head.next = null;
        return last;
    }

    /**
     * 单链表反转II - 中等 - 遍历解法
     * 输入：head = [1,2,3,4,5], left = 2, right = 4
     * 输出：[1,4,3,2,5]
     * https://leetcode-cn.com/problems/reverse-linked-list-ii/
     */
    public static ListNode reverseBetween(ListNode head, int left, int right) {
        for (int i = 0; i < left; i++) {

        }
        return null;
    }


    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////

    /** 单链表 */
    public static class ListNode {
        int val;
        ListNode next;

        public ListNode(int val) {
            this.val = val;
        }

        public static ListNode initNode() {
            ListNode listNode = new ListNode(1);
            listNode.next = new ListNode(2);
            listNode.next.next = new ListNode(3);
            listNode.next.next.next = new ListNode(4);
            listNode.next.next.next.next = new ListNode(5);
            return listNode;
        }

        @Override
        public String toString() {
            StringBuilder str = new StringBuilder();
            ListNode curr = this;
            while (curr != null) {
                str.append(curr.val);
                curr = curr.next;
                if (curr != null) {
                    str.append("->");
                }
            }
            return str.toString();
        }
    }

}
